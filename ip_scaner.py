# -*- coding: utf-8 -*-
"""ip scaner

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDrKSU4Fic5Q794G2e_u1GghM1zhwnhb
"""

import socket
import dns.resolver
import requests
import whois
import json
import sqlite3

# Fungsi untuk mendapatkan IP dari domain
def get_ip_from_domain(domain):
    try:
        resolver = dns.resolver.Resolver()
        result = resolver.resolve(domain, 'A')  # Mengambil record A
        ips = [ip.address for ip in result]
        return ips
    except (dns.resolver.NoAnswer, dns.resolver.NXDOMAIN, dns.resolver.LifetimeTimeout) as e:
        return f"Error: {str(e)}"

# Fungsi untuk mengecek apakah domain aktif (status HTTP)
def check_domain_status(domain):
    try:
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(f"http://{domain}", headers=headers, timeout=5)
        return response.status_code
    except requests.exceptions.RequestException as e:
        return f"Error: {str(e)}"

# Fungsi untuk mengambil informasi WHOIS tentang domain
def get_whois_info(domain):
    try:
        domain_info = whois.whois(domain)
        return domain_info
    except Exception as e:
        return f"Error: {str(e)}"

# Fungsi untuk mendapatkan lokasi geografis dari IP menggunakan API ipinfo.io
def get_ip_location(ip):
    try:
        response = requests.get(f"https://ipinfo.io/{ip}/json")
        if response.status_code == 200:
            data = response.json()
            location = data.get("loc", "Lokasi tidak ditemukan")
            city = data.get("city", "Tidak diketahui")
            region = data.get("region", "Tidak diketahui")
            country = data.get("country", "Tidak diketahui")
            return {
                "IP": ip,
                "City": city,
                "Region": region,
                "Country": country,
                "Location (lat,long)": location
            }
        else:
            return {"Error": "Tidak dapat mengakses data lokasi."}
    except Exception as e:
        return {"Error": str(e)}

# Fungsi untuk mengecek kelemahan SQL Injection berdasarkan domain
def check_sql_injection(domain):
    try:
        payload = "' OR '1'='1"
        url = f"http://{domain}/?id={payload}"
        response = requests.get(url, timeout=5)
        if "sql" in response.text.lower() or "error" in response.text.lower():
            return f"Potensi kelemahan SQL Injection terdeteksi pada {url}!"
        return f"Tidak ada kelemahan SQL Injection yang terdeteksi pada {domain}."
    except requests.exceptions.RequestException as e:
        return f"Error: {str(e)}"

# Fungsi untuk mendeteksi tipe database berdasarkan domain
def detect_database_type(domain):
    try:
        url = f"http://{domain}/"
        headers = {"User-Agent": "Mozilla/5.0"}
        response = requests.get(url, headers=headers, timeout=5)
        server_header = response.headers.get("Server", "Tidak diketahui")
        db_info = "Informasi tidak ditemukan"

        # Deteksi tipe database berdasarkan header server
        if "mysql" in server_header.lower():
            db_info = "MySQL"
        elif "postgresql" in server_header.lower():
            db_info = "PostgreSQL"
        elif "sqlite" in server_header.lower():
            db_info = "SQLite"
        elif "mssql" in server_header.lower():
            db_info = "Microsoft SQL Server"
        elif "oracle" in server_header.lower():
            db_info = "Oracle Database"

        return f"Tipe Database yang terdeteksi untuk {domain}: {db_info} (Server: {server_header})"
    except requests.exceptions.RequestException as e:
        return f"Error: {str(e)}"

# Fungsi utama untuk menjalankan program
def main():
    while True:
        print("=" * 50)
        print(" " * 15 + "IP SCANNER")
        print("=" * 50)

        print("Pilihan:")
        print("1. Scan Domain")
        print("2. Scan IP")
        print("3. Scan Kerentanan SQL Injection")
        print("4. Deteksi Tipe Database")
        print("5. Keluar")
        choice = input("Pilih opsi (1/2/3/4/5): ").strip()

        if choice == "1":
            domain = input("Masukkan domain: ").strip()

            # Menampilkan IP dari domain
            ips = get_ip_from_domain(domain)
            if isinstance(ips, list):
                print(f"\nIP untuk domain {domain}:")
                for ip in ips:
                    print(f"- {ip}")
                    # Menampilkan lokasi IP
                    location_info = get_ip_location(ip)
                    print(json.dumps(location_info, indent=4))
            else:
                print(ips)  # Menampilkan error jika ada

            # Mengecek status HTTP domain
            status_code = check_domain_status(domain)
            print(f"\nStatus HTTP untuk {domain}: {status_code}")

            # Menampilkan informasi WHOIS
            whois_info = get_whois_info(domain)
            print(f"\nInformasi WHOIS untuk {domain}:")
            print(whois_info)

        elif choice == "2":
            ip = input("Masukkan IP: ").strip()
            location_info = get_ip_location(ip)
            print(f"\nLokasi untuk IP {ip}:")
            print(json.dumps(location_info, indent=4))

        elif choice == "3":
            domain = input("Masukkan domain untuk scanning SQL Injection: ").strip()
            result = check_sql_injection(domain)
            print(f"\nHasil scanning SQL Injection untuk {domain}:")
            print(result)

        elif choice == "4":
            domain = input("Masukkan domain untuk deteksi tipe database: ").strip()
            db_info = detect_database_type(domain)
            print(f"\nInformasi Tipe Database untuk {domain}:")
            print(db_info)

        elif choice == "5":
            print("Program selesai. Terima kasih.")
            break

        else:
            print("Pilihan tidak valid. Silakan coba lagi.")

if __name__ == "__main__":
    main()

!pip install dnspython python-whois requests